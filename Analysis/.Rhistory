theme(legend.position="right",
axis.text=element_text(size=14),
axis.title=element_text(size=14),
axis.text.x = element_text(angle = 90),
panel.background = element_rect(fill = NA),
axis.line = element_line(size = 0.5, colour = "black"),
legend.title = element_blank(),
legend.text = element_text(face = "italic")) +
guides(fill=guide_legend(ncol=2), size = .1)+
xlab("")+
ylab("Relative abundance")+
facet_wrap(~meta_data$Geo.Origin, scales="free_x")+
theme(
strip.background = element_rect(
color="white", fill="white", size=1, linetype="solid"),
strip.text.x = element_text(size = 12)
)
Dis.grps
dev.off()
dev.off()
pdf(file = "../Figure 7 - Metagenomics/Figure7A_rebuttal",   # The directory you want to save the file in
width = 10, # The width of the plot in inches
height = 15)
Dis.grps<-ggplot(data=meta_data,aes(x=Disease, y=value, fill=variable))+
geom_bar(aes(), stat="identity", position = "fill") +
scale_fill_manual(values = c("#ff3333","#900D03", "#E3242B", "#B90E0A", "#ff9999","#BC544B",
"darkblue", "darkgoldenrod1", "darkseagreen", "darkorchid", "darkolivegreen1",
"lightskyblue", "darkgreen", "deeppink", "khaki2", "firebrick", "brown1",
"darkorange1", "cyan1", "royalblue4", "darksalmon", "brown4", "royalblue3",
"dodgerblue3", "steelblue1", "lightskyblue", "darkseagreen1", "darkgoldenrod3",
"darkseagreen2", "darkorchid3", "darkolivegreen2", "brown3", "darkorange3", "cyan3",
"darkseagreen3", "darkblue", "darkgoldenrod4", "darkseagreen2", "darkorchid1",
"darkolivegreen2", "grey" )) +
scale_y_continuous(labels = scales::percent)+
theme(legend.position="right",
axis.text=element_text(size=14),
axis.title=element_text(size=14),
axis.text.x = element_text(angle = 90),
panel.background = element_rect(fill = NA),
axis.line = element_line(size = 0.5, colour = "black"),
legend.title = element_blank(),
legend.text = element_text(face = "italic")) +
guides(fill=guide_legend(ncol=2), size = .1)+
xlab("")+
ylab("Relative abundance")+
facet_wrap(~meta_data$Geo.Origin, scales="free_x")+
theme(
strip.background = element_rect(
color="white", fill="white", size=1, linetype="solid"),
strip.text.x = element_text(size = 12)
)
Dis.grps
dev.off()
Dis.grps
Dis.grps
quartz.save("../Figure 7 - Metagenomics/Figure7A_rebuttal", type="pdf")
quartz.save("../Figure 7 - Metagenomics/Figure7A_rebuttal", type="pdf")
quartz.save("../Figure 7 - Metagenomics/Figure7A_rebuttal.pdf", type="pdf")
quartz.save("../Figure 7 - Metagenomics/Figure7A_rebuttal.png", type="png")
quartz.save("../Figure 7 - Metagenomics/Figure7A_rebuttal.png", type="png", dpi=300)
quartz.save("../Figure 7 - Metagenomics/Figure7A_rebuttal.png", type="png", dpi=600)
ggsave(
"Figure7A_rebuttal.pdf",
plot = last_plot(),
device = "pdf",
path = "../Figure 7 - Metagenomics/",
width = 15,
height = 10,
units = "cm",
dpi = 600)
ggsave(
"Figure7A_rebuttal.pdf",
plot = last_plot(),
device = "pdf",
path = "../Figure 7 - Metagenomics/",
width = 15,
height = 10,
units = "cm",
dpi = 600)
ggsave(
"Figure7A_rebuttal.pdf",
plot = last_plot(),
device = "pdf",
path = "../Figure 7 - Metagenomics/",
width = 15,
height = 10,
units = "in",
dpi = 600)
ggsave(
"Figure7A_rebuttal.pdf",
plot = last_plot(),
device = "pdf",
path = "../Figure 7 - Metagenomics/",
width = 10,
height = 15,
units = "in",
dpi = 600)
ggsave(
"Figure7A_rebuttal.pdf",
plot = last_plot(),
device = "pdf",
path = "../Figure 7 - Metagenomics/",
width = 12,
height = 10,
units = "in",
dpi = 600)
ggsave(
"Figure7A_rebuttal.pdf",
plot = last_plot(),
device = "pdf",
path = "../Figure 7 - Metagenomics/",
width = 12,
height = 8,
units = "in",
dpi = 600)
ggsave(
"Figure7A_rebuttal.pdf",
plot = last_plot(),
device = "pdf",
path = "../Figure 7 - Metagenomics/",
width = 10,
height = 8,
units = "in",
dpi = 600)
ggsave(
"Figure7A_rebuttal.pdf",
plot = last_plot(),
device = "pdf",
path = "../Figure 7 - Metagenomics/",
width = 10,
height = 6,
units = "in",
dpi = 600)
---
title: "R codebase for Li, Mac Aogáin & Xu et al. 2022 - Figure 4 (b) and (c)"
authors: "Micheál Mac Aogáin, Hong Sheng Cheng"
date: "4/18/2022"
output:
BiocStyle::html_document
---
## Install and load required R packages
Requires: DESeq2, GO.db, WGCNA, impute and preprocessCore.
```{r, warning = FALSE, message = FALSE}
#if(!require("BiocManager", quietly = TRUE))
#  install.packages("BiocManager")
#BiocManager::install("DESeq2", force = TRUE)
#BiocManager::install("GO.db", force = TRUE)
#BiocManager::install("WGCNA", force = TRUE)
#BiocManager::install("impute", force = TRUE)
#BiocManager::install("preprocessCore", force = TRUE)
library(DESeq2)
library(WGCNA)
library(ggplot2)
library(RColorBrewer)
```
---
title: "R codebase for Li, Mac Aogáin & Xu et al. 2022 - Figure 4 (b) and (c)"
authors: "Micheál Mac Aogáin, Hong Sheng Cheng"
date: "4/18/2022"
output:
BiocStyle::html_document
---
## R Markdown
This R Markdown document details R-generated analysis represented in Figure 4 of "Neissieria species as pathobioints in bronchiectasis" (under review - Cell Host & Microbe).
## Install and load required R packages
Requires: DESeq2, GO.db, WGCNA, impute and preprocessCore.
```{r, warning = FALSE, message = FALSE}
#if(!require("BiocManager", quietly = TRUE))
#  install.packages("BiocManager")
#BiocManager::install("DESeq2", force = TRUE)
#BiocManager::install("GO.db", force = TRUE)
#BiocManager::install("WGCNA", force = TRUE)
#BiocManager::install("impute", force = TRUE)
#BiocManager::install("preprocessCore", force = TRUE)
library(DESeq2)
library(WGCNA)
library(ggplot2)
library(RColorBrewer)
```
```{r, warning = FALSE, message = FALSE}
## Install and load required R packages
Requires: DESeq2, GO.db, WGCNA, impute and preprocessCore.
```{r, warning = FALSE, message = FALSE}
if(!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2", force = TRUE)
## Load data for Figure 4
```{r}
FC_count<-read.csv("../Data/FC_count.csv")
coldata<-read.csv("../Data/coldata.csv", head=T,row.names=1,stringsAsFactors = F)
#if(!require("BiocManager", quietly = TRUE))
#  install.packages("BiocManager")
#BiocManager::install("DESeq2", force = TRUE)
#BiocManager::install("GO.db", force = TRUE)
#BiocManager::install("WGCNA", force = TRUE)
#BiocManager::install("impute", force = TRUE)
#BiocManager::install("preprocessCore", force = TRUE)
library(DESeq2)
library(WGCNA)
library(ggplot2)
library(RColorBrewer)
FC_count<-read.csv("../Data/FC_count.csv")
coldata<-read.csv("../Data/coldata.csv", head=T,row.names=1,stringsAsFactors = F)
#if(!require("BiocManager", quietly = TRUE))
#  install.packages("BiocManager")
#BiocManager::install("DESeq2", force = TRUE)
#BiocManager::install("GO.db", force = TRUE)
#BiocManager::install("WGCNA", force = TRUE)
#BiocManager::install("impute", force = TRUE)
#BiocManager::install("preprocessCore", force = TRUE)
library(DESeq2)
library(WGCNA)
library(ggplot2)
library(RColorBrewer)
FC_count<-read.csv("../Data/FC_count.csv")
coldata<-read.csv("../Data/coldata.csv", head=T,row.names=1,stringsAsFactors = F)
knitr::opts_chunk$set(echo = TRUE)
#if(!require("BiocManager", quietly = TRUE))
#  install.packages("BiocManager")
#BiocManager::install("DESeq2")
#BiocManager::install("GO.db")
#BiocManager::install("WGCNA")
#BiocManager::install("impute")
#BiocManager::install("preprocessCore")
library(DESeq2)
library(WGCNA)
library(ggplot2)
library(RColorBrewer)
library(pheatmap)
Metabolite_serum<-read.csv("../Data/Metabolite_serum.csv")
Blue<-read.csv("../Data/Blue.csv", head=T,stringsAsFactors = F)
setwd("~/Code/Neisseria/Analysis")
Metabolite_serum<-read.csv("../Data/Metabolite_serum.csv")
Blue<-read.csv("../Data/Blue.csv", head=T,stringsAsFactors = F)
Blue<-read.csv("../Data/Blue.csv", head=T,stringsAsFactors = F)
Metabolite_serum<-read.csv("../Data/Metabolite_serum.csv")
Blue<-read.csv("../Data/Blue.csv", head=T,stringsAsFactors = FALSE)
Green<-read.csv("../Data/Green.csv", head=T,stringsAsFactors = FALSE)
Purple<-read.csv("../Data/Purple.csv", head=T,stringsAsFactors = FALSE)
vsdmat<-read.csv("../Data/vsdmat.csv", row.names = 1)
vsdmat<-as.matrix(vsdmat) #output from Figure 4 code
clusterlist<-read.csv("../Data/clusterlist.csv",row.names = 1)
clusterlist<-as.data.frame(clusterlist) #output from Figure 4 code
coldata<-read.csv("../Data/coldata.csv", head=T,row.names=1,stringsAsFactors = FALSE)
Metabolite_serum<-read.csv("../Data/Metabolite_serum.csv")
Blue<-read.csv("../Data/Blue.csv", head=T,stringsAsFactors = FALSE)
Green<-read.csv("../Data/Green.csv", head=T,stringsAsFactors = FALSE)
Purple<-read.csv("../Data/Purple.csv", head=T,stringsAsFactors = FALSE)
vsdmat<-read.csv("../Data/vsdmat.csv", row.names = 1)
vsdmat<-as.matrix(vsdmat) #output from Figure 4 code
clusterlist<-read.csv("../Data/clusterlist.csv",row.names = 1)
clusterlist<-as.data.frame(clusterlist) #output from Figure 4 code
rownames(Metabolite_serum)<-Metabolite_serum$ID
Metabolite_serum<-Metabolite_serum[,-c(1:4)]
hm_color_cor<- colorRampPalette(c("blue", "white", "red"))(100)
HM_Metabolite_serum<-pheatmap(Metabolite_serum, scale = 'column', border_color = 'NA',
color = hm_color_cor,show_rownames = TRUE,cellwidth = 12,
cellheight = 12,
cluster_rows = FALSE, cluster_cols = TRUE,
angle_col =45,cutree_cols = 2)
#metabolite group data #sum of abundance
#Plot not visible in markdown HTML file (?)
Metabolite_group<-as.data.frame(Metabolite_serum[,HM_Metabolite_serum$tree_col[['order']]])
Metabolite_group<-as.data.frame(t(Metabolite_group))
group<-as.data.frame(cutree(HM_Metabolite_serum$tree_col, k=2))
colnames(group)<-c('group')
#group<-group[colnames(Metabolite_group),,drop=FALSE]
Metabolite_group$group<-group$group
Metabolite_group1<-subset(Metabolite_group,Metabolite_group$group=="1")
Metabolite_group1$group<-NULL
Metabolite_group1<-as.data.frame(t(Metabolite_group1))
Metabolite_group1$Group1<-rowSums(Metabolite_group1)
Metabolite_group1<-Metabolite_group1[,c(19),drop=F]
FC_count<-read.csv("../Data/FC_count.csv")
coldata<-read.csv("../Data/coldata.csv", head=T,row.names=1,stringsAsFactors = FALSE)
#preparing count file from Featurecounts
rownames(FC_count)<-FC_count$gene_id
FC_count$gene_id<-NULL
FC_count<-as.matrix(FC_count)
#preparing coldata
rownames(coldata)<-coldata$ID
coldata$ID<-NULL
coldata$group<-paste0(coldata$Treatment,sep="_D",coldata$Day)
coldata$group<-factor(coldata$group,levels=c("Control_D0","Infected_D2","Infected_D4","Infected_D7","Infected_D14"))
coldata$Treatment<-factor(coldata$Treatment,levels=c("Control","Infected"))
coldata$Day<-factor(coldata$Day,levels=c("0",'2','4','7','14'))
dds<-DESeqDataSetFromMatrix(countData=FC_count,colData = coldata, design=~group)
dds<-DESeq(dds)
vsd<-varianceStabilizingTransformation(dds, blind=TRUE)
plotPCA(vsd,intgroup="group")
res.D2<-results(dds,contrast=c('group','Infected_D2','Control_D0'),alpha=0.05)
res.D2<-res.D2[order(res.D2$padj),]
sig.res.D2<-res.D2[which((res.D2$padj<0.05) & (abs(res.D2$log2FoldChange)>1)),]
res.D4<-results(dds,contrast=c('group','Infected_D4','Control_D0'),alpha=0.05)
res.D4<-res.D4[order(res.D4$padj),]
sig.res.D4<-res.D4[which((res.D4$padj<0.05) & (abs(res.D4$log2FoldChange)>1)),]
res.D7<-results(dds,contrast=c('group','Infected_D7','Control_D0'),alpha=0.05)
res.D7<-res.D7[order(res.D7$padj),]
sig.res.D7<-res.D7[which((res.D7$padj<0.05) & (abs(res.D7$log2FoldChange)>1)),]
res.D14<-results(dds,contrast=c('group','Infected_D14','Control_D0'),alpha=0.05)
res.D14<-res.D14[order(res.D14$padj),]
sig.res.D14<-res.D14[which((res.D14$padj<0.05) & (abs(res.D14$log2FoldChange)>1)),]
DEGlist<-union(rownames(sig.res.D2),row.names(sig.res.D4))
DEGlist<-union(DEGlist,row.names(sig.res.D7))
DEGlist<-union(DEGlist,row.names(sig.res.D14))
vsdtable<-as.data.frame(assay(vsd))
vsdtable<-vsdtable[,c(1:5,11:24,6:10)]
vsdtable_DEGlist<-subset(vsdtable,rownames(vsdtable) %in% DEGlist)
vsdmat<-as.matrix(vsdtable_DEGlist)
write.csv(vsdmat, "../Data/vsdmat.csv")
coldata_hm<-coldata[c(1:5,11:24,6:10),]
coldata_hm<-data.frame(coldata_hm[,c(3),drop=FALSE])
library('RColorBrewer')
library('pheatmap')
my_color_annotation<-list(group = c(Control_D0 = "#FFFF08",
Infected_D2 = "#FFDA08",
Infected_D4 ="#FFB508",
Infected_D7 ="#FF8C08",
Infected_D14 ="#FF5508"),
cluster=c('5'="#99E600",'1'="#68DC00",'2'="#00D43D",
'7'="#00978C",'3'="#095E9F",'6'="#132AA9",'4'="#6D08A5"))
hm_color<- colorRampPalette(rev(brewer.pal(11, "RdBu")))(100)
HM_vsdmat<-pheatmap(vsdmat, scale = 'row', border_color = 'NA',
color = hm_color,show_rownames = FALSE,
cluster_rows = TRUE, cluster_cols = FALSE,
annotation_col=coldata_hm,
annotation_colors =my_color_annotation,
clustering_distance_rows = 'correlation',
angle_col =45)
clusterlist<-as.data.frame(vsdmat[HM_vsdmat$tree_row[['order']],]) #obtain gene clusters #each gene cluster is exported for functional enrichment analysis
clus<-as.data.frame(cutree(HM_vsdmat$tree_row, k=7))
colnames(clus)<-c('cluster')
clus<-clus[rownames(clusterlist),,drop=FALSE]
clusterlist$cluster<-clus$cluster
write.csv(clusterlist, "../Data/clusterlist.csv")
roldata_hm<-clusterlist[,c(25),drop=FALSE]
roldata_hm$cluster<-factor(roldata_hm$cluster,levels = c("5",'1','2','7','3','6','4'))
HM_vsdmat<-pheatmap(vsdmat, scale = 'row', border_color = 'NA',
color = hm_color,show_rownames = FALSE,
cluster_rows = TRUE, cluster_cols = FALSE,
annotation_col=coldata_hm,
annotation_row = roldata_hm,
annotation_colors =my_color_annotation,
clustering_distance_rows = 'correlation',
angle_col =45)
#metabolite group data #sum of abundance
#Plot not visible in markdown HTML file (?)
Metabolite_group<-as.data.frame(Metabolite_serum[,HM_Metabolite_serum$tree_col[['order']]])
Metabolite_group<-as.data.frame(t(Metabolite_group))
group<-as.data.frame(cutree(HM_Metabolite_serum$tree_col, k=2))
colnames(group)<-c('group')
#group<-group[colnames(Metabolite_group),,drop=FALSE]
Metabolite_group$group<-group$group
Metabolite_group1<-subset(Metabolite_group,Metabolite_group$group=="1")
Metabolite_group1$group<-NULL
Metabolite_group1<-as.data.frame(t(Metabolite_group1))
Metabolite_group1$Group1<-rowSums(Metabolite_group1)
Metabolite_group1<-Metabolite_group1[,c(19),drop=F]
#metabolite group data #sum of abundance
#Plot not visible in markdown HTML file (?)
Metabolite_group<-as.data.frame(Metabolite_serum[,HM_Metabolite_serum$tree_col[['order']]])
Metabolite_group<-as.data.frame(t(Metabolite_group))
group<-as.data.frame(cutree(HM_Metabolite_serum$tree_col, k=2))
colnames(group)<-c('group')
#group<-group[colnames(Metabolite_group),,drop=FALSE]
Metabolite_group$group<-group$group
Metabolite_group1<-subset(Metabolite_group,Metabolite_group$group=="1")
Metabolite_group1$group<-NULL
Metabolite_group1<-as.data.frame(t(Metabolite_group1))
Metabolite_group1$Group1<-rowSums(Metabolite_group1)
Metabolite_group1<-Metabolite_group1[,c(19),drop=FALSE]
Metabolite_group2<-subset(Metabolite_group,Metabolite_group$group=="2")
Metabolite_group2$group<-NULL
Metabolite_group2<-as.data.frame(t(Metabolite_group2))
Metabolite_group2$Group2<-rowSums(Metabolite_group2)
Metabolite_group2<-Metabolite_group2[,c(14),drop=F]
#metabolite group data #sum of abundance
#Plot not visible in markdown HTML file (?)
Metabolite_group<-as.data.frame(Metabolite_serum[,HM_Metabolite_serum$tree_col[['order']]])
Metabolite_group<-as.data.frame(t(Metabolite_group))
group<-as.data.frame(cutree(HM_Metabolite_serum$tree_col, k=2))
colnames(group)<-c('group')
#group<-group[colnames(Metabolite_group),,drop=FALSE]
Metabolite_group$group<-group$group
Metabolite_group1<-subset(Metabolite_group,Metabolite_group$group=="1")
Metabolite_group1$group<-NULL
Metabolite_group1<-as.data.frame(t(Metabolite_group1))
Metabolite_group1$Group1<-rowSums(Metabolite_group1)
Metabolite_group1<-Metabolite_group1[,c(19),drop=FALSE]
Metabolite_group2<-subset(Metabolite_group,Metabolite_group$group=="2")
Metabolite_group2$group<-NULL
Metabolite_group2<-as.data.frame(t(Metabolite_group2))
Metabolite_group2$Group2<-rowSums(Metabolite_group2)
Metabolite_group2<-Metabolite_group2[,c(14),drop=FALSE]
Metabolite_abundance<-as.data.frame(cbind(Metabolite_group1,Metabolite_group2))
###WGCNA######
exprsdat<-vsdmat[,c(1:19)]
exprsdat<-exprsdat[,-c(10)] #ensure the samples are matched with those from serum metabolomics
exprsdat<-as.data.frame(t(exprsdat))
##check missing values
###if result is TRUE, then all genes have passed the test
gsg = goodSamplesGenes(exprsdat, verbose = 3);
gsg$allOK
#omit unqualified gene
if (!gsg$allOK){
# Optionally, print the gene and sample names that were removed:
if (sum(!gsg$goodGenes)>0)
printFlush(paste("Removing genes:", paste(names(exprsdat)[!gsg$goodGenes], collapse = ", ")));
if (sum(!gsg$goodSamples)>0)
printFlush(paste("Removing samples:", paste(rownames(exprsdat)[!gsg$goodSamples], collapse = ", ")));
# Remove the offending genes and samples from the data:
exprsdat = exprsdat[gsg$goodSamples, gsg$goodGenes]
}
TranscriptomeSamples = rownames(exprsdat)
traitRows = match(TranscriptomeSamples, rownames(Metabolite_abundance))
datTraits = Metabolite_abundance[traitRows, c(1:2)]
clusterlist2<-clusterlist[colnames(exprsdat),]
moduleColors = clusterlist2$cluster
# Define numbers of genes and samples
nGenes = ncol(exprsdat);
nSamples = nrow(exprsdat);
# Calculate eigengenes of different clusters
MEs0 = moduleEigengenes(exprsdat, moduleColors)$eigengenes
MEs = MEs0
MEs = MEs[,rev(c(5,1,2,7,3,6,4))]
moduleTraitCor = cor(MEs, datTraits, use = "p")
moduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples)
sizeGrWindow(6,6)
# Will display correlations and their p-values
textMatrix = paste(signif(moduleTraitCor, 2), "\n(",
signif(moduleTraitPvalue, 1), ")", sep = "");
dim(textMatrix) = dim(moduleTraitCor)
par(mar = c(6, 8.5, 3, 3));
# Display the correlation values within a heatmap plot
png("6B_png_for_HTML.png")
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = names(datTraits),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = blueWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.5,
zlim = c(-1,1),
bg.lab.y = rev(c("#99E600","#68DC00","#00D43D","#00978C","#095E9F","#132AA9","#6D08A5")),
main = paste("Module-trait relationships"))
dev.off()
knitr::include_graphics("6B_png_for_HTML.png")
library(ggplot2)
library(RColorBrewer)
colnames(Green)<-c("cat",'logp','ratio','zscore','molecules')
Green$percent<-Green$ratio*100
Green<-Green[,-c(4:5)]
Green$clus<-rep("Green",10)
colnames(Blue)<-c("cat",'logp','ratio','zscore','molecules')
Blue$percent<-Blue$ratio*100
Blue<-Blue[,-c(4:5)]
Blue$clus<-rep("Blue",10)
colnames(Purple)<-c("cat",'logp','ratio','zscore','molecules')
Purple$percent<-Purple$ratio*100
Purple<-Purple[,-c(4:5)]
Purple$clus<-rep("Purple",10)
IPA<-rbind(Green,Blue,Purple)
IPA$clus<-factor(IPA$clus,levels=c("Green",'Blue','Purple'))
IPA_plot<-ggplot(data=IPA, aes(x=percent,y=reorder(cat,percent),color=logp,size=percent))+
geom_point()+
xlim(c(0,30))+
scale_color_gradientn(colours=colorRampPalette(c("#4951a3",'red'))(20),
breaks=c(2,3,4,5),labels=c(2,3,4,5),limits=c(1,6))+
facet_grid(rows=vars(clus),scales = "free_y")+
scale_size(range = c(4,10))+
theme_gray()+
labs(x="Percentage enrichment(%)",y="IPA canonical pathway",color="-log (p value)",size="Percentage enrichment(%)")
IPA_plot
rmarkdown::render(rstudioapi::getSourceEditorContext()$path)
if(!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
library(ggplot2)
library(RColorBrewer)
5+%
5+5
Dis.grps<-ggplot(data=meta_data,aes(x=Disease, y=value, fill=variable))+
geom_bar(aes(), stat="identity", position = "fill") +
scale_fill_manual(values = c("#ff3333","#900D03", "#E3242B", "#B90E0A", "#ff9999","#BC544B",
"darkblue", "darkgoldenrod1", "darkseagreen", "darkorchid", "darkolivegreen1",
"lightskyblue", "darkgreen", "deeppink", "khaki2", "firebrick", "brown1",
"darkorange1", "cyan1", "royalblue4", "darksalmon", "brown4", "royalblue3",
"dodgerblue3", "steelblue1", "lightskyblue", "darkseagreen1", "darkgoldenrod3",
"darkseagreen2", "darkorchid3", "darkolivegreen2", "brown3", "darkorange3", "cyan3",
"darkseagreen3", "darkblue", "darkgoldenrod4", "darkseagreen2", "darkorchid1",
"darkolivegreen2", "grey" )) +
scale_y_continuous(labels = scales::percent)+
theme(legend.position="right",
axis.text=element_text(size=14),
axis.title=element_text(size=14),
axis.text.x = element_text(angle = 90),
panel.background = element_rect(fill = NA),
axis.line = element_line(size = 0.5, colour = "black"),
legend.title = element_blank(),
legend.text = element_text(face = "italic")) +
guides(fill=guide_legend(ncol=2), size = .1)+
xlab("")+
ylab("Relative abundance")+
facet_wrap(~meta_data$Geo.Origin, scales="free_x")+
theme(
strip.background = element_rect(
color="white", fill="white", size=1, linetype="solid"),
strip.text.x = element_text(size = 12)
)
Dis.grps
